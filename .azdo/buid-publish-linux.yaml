
trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  publishPath: 'readit-two/out/make'
  debPath: 'deb/x64/readit-two_$(VERSION_TAG)_amd64.deb'
  rpmPath: 'rpm/x64/readit-two-$(VERSION_TAG)-1.x86_64.rpm'
  zipPath: 'zip/linux/x64/readit-two-linux-x64-$(VERSION_TAG).zip'
  version: $(VERSION_TAG)

stages:
  - stage: Build
    displayName: Build Desktop Application
    jobs:
    
      - job: CreateRelease
        steps:
          - task: CmdLine@2
            displayName: 'Check for GitHub Release'
            continueOnError: true
            inputs:
              script: |
                if ! gh release view --repo $(GITHUB_REPOSITORY) "v$(VERSION_TAG)"; then
                  gh release create --draft --latest --repo $(GITHUB_REPOSITORY) "v$(VERSION_TAG)" --title "v$(VERSION_TAG)"
                fi
            env:
              GH_TOKEN: $(PUBLISH_TOKEN)

      - job: BuildAndPublish
        dependsOn: CreateRelease
        displayName: 'Build'
        steps:
          - task: NodeTool@0
            displayName: "Install Node.js"
            inputs:
              versionSpec: "21.x"
          
          # - task: CmdLine@2
          #   displayName: 'Install destop app dependencies'
          #   inputs:
          #     script: 'npm install'
          #     workingDirectory: '$(System.DefaultWorkingDirectory)/readit-two'

          - task: Npm@1
            displayName: 'Install desktop app depedencies'
            inputs:
              command: 'install'
              workingDir: '$(System.DefaultWorkingDirectory)/readit-two'
              verbose: true

          # - task: CmdLine@2
          #   displayName: 'Publish to Application'
          #   inputs:
          #     script: 'npm run publish'
          #     workingDirectory: 'readit-two'

          - task: Npm@1
            displayName: 'Build desktop app'
            inputs:
              command: 'custom'
              customCommand: 'run make'
              workingDir: '$(System.DefaultWorkingDirectory)/readit-two'

          - task: CmdLine@2
            displayName: 'Move output files'
            inputs:
              script: |
                mv main ../
                mv renderer ../
              workingDirectory: '$(System.DefaultWorkingDirectory)/readit-two/.webpack/x64'

          - task: Npm@1
            displayName: 'Build AppImage'
            inputs:
              command: 'custom'
              customCommand: 'run build:appImage'
              workingDir: '$(System.DefaultWorkingDirectory)/readit-two'
              verbose: true
              
          - task: Npm@1
            displayName: 'Publish deb'
            inputs:
              command: 'custom'
              customCommand: 'run publish'
              workingDir: '$(System.DefaultWorkingDirectory)/readit-two'
              verbose: true

          - task: CopyFiles@2
            inputs:
              sourceFolder: '$(Build.SourcesDirectory)'
              flattenFolders: false
              contents: |
                readit-two/out/make/**
              targetFolder: '$(Build.ArtifactStagingDirectory)'
            displayName: 'Copy output files'

          - task: PublishPipelineArtifact@1
            inputs:
              artifactName: electron-app
              targetPath: '$(Build.ArtifactStagingDirectory)'
              publishLocation: 'pipeline'
            displayName: 'Publish electron app artifact'

          # - task: CmdLine@2
          #   displayName: 'Publish Deb to GitHub'
          #   inputs:
          #     script: 'gh release upload --repo $(GITHUB_REPOSITORY) "v$(VERSION_TAG)" "$(Build.ArtifactStagingDirectory)/$(publishPath)/$(debPath)"'
          #   env:
          #     GH_TOKEN: $(PUBLISH_TOKEN)

          # - task: CmdLine@2
          #   displayName: 'Publish RPM to GitHub'
          #   inputs:
          #     script: 'gh release upload --repo $(GITHUB_REPOSITORY) "v$(VERSION_TAG)" "$(Build.ArtifactStagingDirectory)/$(publishPath)/$(rpmPath)"'
          #   env:
          #     GH_TOKEN: $(PUBLISH_TOKEN)            
      
          # - task: CmdLine@2
          #   displayName: 'Publish Zip to GitHub'
          #   inputs:
          #     script: 'gh release upload --repo $(GITHUB_REPOSITORY) "v$(VERSION_TAG)" "$(Build.ArtifactStagingDirectory)/$(publishPath)/$(zipPath)"'
          #   env:
          #     GH_TOKEN: $(PUBLISH_TOKEN)            
      